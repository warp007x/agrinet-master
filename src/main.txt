#include <Arduino.h>
#include <esp_now.h>
#include <WiFi.h>
#include "ESPAsyncWebServer.h"
#include "AsyncTCP.h"
#include <ArduinoJson.h>
#include <Wire.h>
#include<SoftwareSerial.h>
#include "SerialTransfer.h"

#define MYPORT_TX 12
#define MYPORT_RX 13
EspSoftwareSerial::UART myPort;

// SerialTransfer cmd;
SerialTransfer msg;
// SerialTransfer mnt;

// Replace with your network credentials (STATION)
const char* ssid = "agrinet_master";
const char* password = "lol12345";
 uint16_t id = 0;
esp_now_peer_info_t slave;
int chan = 5; 

enum MessageType {PAIRING, ACK, DATA, COMMAND, MAINTENANCE};
MessageType messageType;

int counter = 0;
String jsondata;
StaticJsonDocument<1024> doc_data;
StaticJsonDocument<1024> doc_cmd;
StaticJsonDocument<1024> doc_mnt;

StaticJsonDocument<1024> JSONbuffer;

// Structure example to receive data
// Must match the sender structure
typedef struct struct_message {
    uint8_t      msgType;
    uint8_t      id;
    String       jsonData;
    unsigned int readingId;
} struct_message;

typedef struct struct_command {
    uint8_t      msgType;
    uint8_t      id;
    String       jsonData;
} struct_command;

typedef struct struct_pairing {       // new structure for pairing
    uint8_t msgType;
    uint8_t id;
    uint8_t macAddr[6];
    uint8_t channel;
} struct_pairing;

typedef struct struct_ack {       // new structure for pairing
    uint8_t msgType;
    uint8_t id;
    String  jsonData;
} struct_ack;

typedef struct struct_maintenance {
    uint8_t      msgType;
    uint8_t      id;
    String       jsonData;
} struct_maintenance;

struct_message incomingReadings;
struct_message outgoingSetpoints;

struct_pairing pairingData;

struct_command incoming_command;
struct_command command_out;

struct_maintenance incoming_maintenance;
struct_maintenance maintenance_out;


String uart_msg;

String uart_cmd;
String uart_mnt;

AsyncWebServer server(80);
AsyncEventSource events("/events");

const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE HTML><html>
<head>
  <title>ESP-AGRINET</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.7.2/css/all.css" integrity="sha384-fnmOCqbTlWIlj8LyTjo7mOUStjsKC4pOpQbqyi7RrhN7udi9RwhKkMHpvLbHG9Sr" crossorigin="anonymous">
  <link rel="icon" href="data:,">
  <style>
    html {font-family: Arial; display: inline-block; text-align: center;}
    p {  font-size: 1.2rem;}
    body {  margin: 0;}
    .topnav { overflow: hidden; background-color: #2f4468; color: white; font-size: 1.7rem; }
    .content { padding: 20px; }
    .card { background-color: white; box-shadow: 2px 2px 12px 1px rgba(140,140,140,.5); }
    .cards { max-width: 700px; margin: 0 auto; display: grid; grid-gap: 2rem; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); }
    .reading { font-size: 2.8rem; }
    .packet { color: #bebebe; }
    .card.temperature { color: #fd7e14; }
    .card.humidity { color: #1b78e2; }
  </style>
</head>
<body>
  <div class="topnav">
    <h3>ESP-NOW DASHBOARD</h3>
  </div>
  <div class="content">
    <div class="cards">
      <div class="card temperature">
        <h4><i class="fas fa-thermometer-half"></i> BOARD #1 - TEMPERATURE</h4><p><span class="reading"><span id="t1"></span> &deg;C</span></p><p class="packet">Reading ID: <span id="rt1"></span></p>
      </div>
      <div class="card humidity">
        <h4><i class="fas fa-tint"></i> BOARD #1 - HUMIDITY</h4><p><span class="reading"><span id="h1"></span> &percnt;</span></p><p class="packet">Reading ID: <span id="rh1"></span></p>
      </div>
      <div class="card temperature">
        <h4><i class="fas fa-thermometer-half"></i> BOARD #2 - TEMPERATURE</h4><p><span class="reading"><span id="t2"></span> &deg;C</span></p><p class="packet">Reading ID: <span id="rt2"></span></p>
      </div>
      <div class="card humidity">
        <h4><i class="fas fa-tint"></i> BOARD #2 - HUMIDITY</h4><p><span class="reading"><span id="h2"></span> &percnt;</span></p><p class="packet">Reading ID: <span id="rh2"></span></p>
      </div>
    </div>
  </div>
<script>
if (!!window.EventSource) {
 var source = new EventSource('/events');
 
 source.addEventListener('open', function(e) {
  console.log("Events Connected");
 }, false);
 source.addEventListener('error', function(e) {
  if (e.target.readyState != EventSource.OPEN) {
    console.log("Events Disconnected");
  }
 }, false);
 
 source.addEventListener('message', function(e) {
  console.log("message", e.data);
 }, false);
 
 source.addEventListener('new_readings', function(e) {
  console.log("new_readings", e.data);
  var obj = JSON.parse(e.data);
  document.getElementById("t"+obj.id).innerHTML = obj.temperature.toFixed(2);
  document.getElementById("h"+obj.id).innerHTML = obj.humidity.toFixed(2);
  document.getElementById("rt"+obj.id).innerHTML = obj.readingId;
  document.getElementById("rh"+obj.id).innerHTML = obj.readingId;
 }, false);
}
</script>
</body>
</html>)rawliteral";

void readDataToSend() {
  StaticJsonDocument<1024> doc;
           
  doc["temperature"]        = id;
  doc["humidity"]           = NULL;
  doc["soil_moisture"]      = NULL;
  doc["water_flow"]         = NULL;
  doc["water_volume"]       = NULL;
  String JSONmessageBuffer;
  serializeJson(doc, JSONmessageBuffer);
  outgoingSetpoints.msgType = DATA;
  outgoingSetpoints.id = id;
  outgoingSetpoints.jsonData = JSONmessageBuffer;
  outgoingSetpoints.readingId = counter++;
}

void commandToSend() {

    StaticJsonDocument<1024> doc;
    doc["device_id"]         = JSONbuffer["id"];
    doc["pump"]              = JSONbuffer["pump"];
    doc["valve"]             = JSONbuffer["valve"];
    String JSONmessageBuffer;
    serializeJson(doc, JSONmessageBuffer);
    command_out.msgType = COMMAND;
    command_out.id = id;
    command_out.jsonData = JSONmessageBuffer;

    esp_now_send(NULL, (uint8_t *) &command_out, sizeof(command_out));
}

void maintenanceDataToSend() {
    StaticJsonDocument<1024> doc;        
    doc["device_id"]         = JSONbuffer["id"];
    doc["state"]             = JSONbuffer["state"];
    doc["time"]              = JSONbuffer["time"];
    String JSONmessageBuffer;
    serializeJson(doc, JSONmessageBuffer);
    maintenance_out.msgType = MAINTENANCE;
    maintenance_out.id = id;
    maintenance_out.jsonData = JSONmessageBuffer;

    esp_now_send(NULL, (uint8_t *) &maintenance_out, sizeof(maintenance_out));
    
 }



// ---------------------------- esp_ now -------------------------
void printMAC(const uint8_t * mac_addr){
  char macStr[18];
  snprintf(macStr, sizeof(macStr), "%02x:%02x:%02x:%02x:%02x:%02x",
           mac_addr[0], mac_addr[1], mac_addr[2], mac_addr[3], mac_addr[4], mac_addr[5]);
  Serial.print(macStr);
}

bool addPeer(const uint8_t *peer_addr) {      // add pairing
  memset(&slave, 0, sizeof(slave));
  const esp_now_peer_info_t *peer = &slave;
  memcpy(slave.peer_addr, peer_addr, 6);
  
  slave.channel = chan; // pick a channel
  slave.encrypt = 0; // no encryption
  // check if the peer exists
  bool exists = esp_now_is_peer_exist(slave.peer_addr);
  if (exists) {
    // Slave already paired.
    Serial.println("Already Paired");
    return true;
  }
  else {
    esp_err_t addStatus = esp_now_add_peer(peer);
    if (addStatus == ESP_OK) {
      // Pair success
      Serial.println("Pair success");
      return true;
    }
    else 
    {
      Serial.println("Pair failed");
      return false;
    }
  }
} 

// callback when data is sent
void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  Serial.print("Last Packet Send Status: ");
  Serial.print(status == ESP_NOW_SEND_SUCCESS ? "Delivery Success to " : "Delivery Fail to ");
  printMAC(mac_addr);
  Serial.println();
}

void OnDataRecv(const uint8_t * mac_addr, const uint8_t *incomingData, int len) { 
  Serial.print(len);
  Serial.print(" bytes of data received from : ");
  printMAC(mac_addr);
  Serial.println();
  jsondata = "";
  DeserializationError error;
  StaticJsonDocument<512> dat_a;
  StaticJsonDocument<512> com_m;
  StaticJsonDocument<512> mai_n;
  String payload;
  uint8_t type = incomingData[0];       // first message byte is the type of message 
  switch (type) {
  // case DATA :                           // the message is data type
  //   memcpy(&incomingReadings, incomingData, sizeof(incomingReadings));
  //   // msg.sendDatum(incomingReadings);
  //   // create a JSON document with received data and send it by event to the web page
  //   jsondata = String(incomingReadings.jsonData);
  //   Serial.print("Recieved: ");
  //   Serial.println(jsondata);    //Complete JSON data will be printed here
  //   // msg.sendDatum(jsondata);
  //   error = deserializeJson(doc_data, jsondata);
  //   if (!error) {
  //           dat_a["id"] = incomingReadings.id;
  //           dat_a["type"] = 'D';
  //           dat_a["temperature"] = doc_data["temperature"];
  //           dat_a["humidity"] = doc_data["humidity"];
  //           dat_a["soilmoisture"] = doc_data["soilmoisture"];
  //           dat_a["flow_rate"] = doc_data["flow_rate"];
  //           dat_a["flow_volume"] = doc_data["flow_volume"];
  //           dat_a["readingId"] = String(incomingReadings.readingId);
  //           serializeJson(dat_a, payload);
  //           Serial.print("event send :");
  //           // serializeJson(dat_a, Serial);
  //           Serial.println(payload);
  //           msg.sendDatum(payload);
  //           events.send(payload.c_str(), "new_readings", millis());
  //           payload = "";
  //           Serial.println();
  //   }
  //   else {
  //       Serial.print(F("Message deserializeJson() failed: "));  //Just in case of an ERROR of ArduinoJSon
  //       Serial.println(error.f_str());
  //   }
  //   break;

  // case COMMAND :                           // the message is command type
  //   memcpy(&incoming_command, incomingData, sizeof(incoming_command));
  //   // create a JSON document with received data and send it by event to the web page
  //   // cmd.sendDatum(command);
  //   jsondata = String(incoming_command.jsonData);
  //   Serial.print("Recieved: ");
  //   Serial.println(jsondata);    //Complete JSON data will be printed here
  //   error = deserializeJson(doc_cmd, jsondata);
  //   if (!error) {
  //           boolean pump  = doc_cmd["pump"];
  //           boolean valve = doc_cmd["valve"];
  //           if(pump){
  //             Serial.println("PUMP ACTIVE!");
  //           }
  //           else Serial.println("PUMP INACTIVE!");

  //           if(valve){
  //             Serial.println("VALVE ACTIVE!");
  //           }
  //           else Serial.println("VALVE INACTIVE!");
  //           com_m["id"] = incoming_command.id;
  //           com_m["type"] = 'C';
  //           com_m["pump"] = pump;
  //           com_m["valve"] = valve;
  //           serializeJson(com_m, payload);
  //           Serial.print("event send :");
  //           // serializeJson(com_m, Serial);
  //           Serial.println(payload);
  //           msg.sendDatum(payload);
  //           events.send(payload.c_str(), "new_command", millis());
  //           payload = "";
  //           Serial.println();
  //   }
  //   else {
  //       Serial.print(F("Command deserializeJson() failed: "));  //Just in case of an ERROR of ArduinoJSon
  //       Serial.println(error.f_str());
  //   }
  //   break;

  // case MAINTENANCE :                           // the message is command type
  //   memcpy(&incoming_maintenance, incomingData, sizeof(incoming_maintenance));
  //   // create a JSON document with received data and send it by event to the web page
  //   // mnt.sendDatum(maintenance);
  //   jsondata = String(incoming_maintenance.jsonData);
  //   Serial.print("Recieved: ");
  //   Serial.println(jsondata);    //Complete JSON data will be printed here
  //   error = deserializeJson(doc_mnt, jsondata);
  //   if (!error) {
  //           String state  = doc_mnt["state"];
  //           uint16_t time = int(doc_mnt["time"]);
  //           if(state == "sleep"){
  //             Serial.println("SLEEPING!");
  //           }
  //           else if(state == "reset"){
  //             Serial.println("RESETTING!");
  //           }
  //           else Serial.println("MAINTENANCE ACTION FAILED!");
  //           Serial.println();
  //   }
  //   else {
  //       Serial.print(F("Maintenance deserializeJson() failed: "));  //Just in case of an ERROR of ArduinoJSon
  //       Serial.println(error.f_str());
  //   }
  //   break;
  
  case PAIRING:                            // the message is a pairing request 
    memcpy(&pairingData, incomingData, sizeof(pairingData));
    Serial.println(pairingData.msgType);
    Serial.println(pairingData.id);
    Serial.print("Pairing request from: ");
    printMAC(mac_addr);
    Serial.println();
    Serial.println(pairingData.channel);
    if (pairingData.id > 0) {     // do not replay to server itself
      if (pairingData.msgType == PAIRING) { 
        pairingData.id = 0;       // 0 is server
        // Server is in AP_STA mode: peers need to send data to server soft AP MAC address 
        WiFi.softAPmacAddress(pairingData.macAddr);   
        pairingData.channel = chan;
        Serial.println("send response");
        esp_err_t result = esp_now_send(mac_addr, (uint8_t *) &pairingData, sizeof(pairingData));
        addPeer(mac_addr);
      }  
    }  
    break; 
  }
}

void initESP_NOW(){
    // Init ESP-NOW
    if (esp_now_init() != ESP_OK) {
      Serial.println("Error initializing ESP-NOW");
      return;
    }
    esp_now_register_send_cb(OnDataSent);
    esp_now_register_recv_cb(OnDataRecv);
} 

void setup() {
  // Initialize Serial Monitor
  Serial.begin(115200); // Standard hardware serial port

  myPort.begin(115200, SWSERIAL_8N1, MYPORT_RX, MYPORT_TX, false);
  if (!myPort) { // If the object did not initialize, then its configuration is invalid
    Serial.println("Invalid EspSoftwareSerial pin configuration, check config"); 
    while (1) { // Don't continue with invalid configuration
      delay (1000);
    }
  } 
  

  msg.begin(myPort);
  // cmd.begin(myPort);
  // mnt.begin(myPort);

  // msg.sendDatum(uart_msg);
  // cmd.sendDatum(uart_cmd);
  // mnt.sendDatum(uart_mnt);

  Serial.println();
  Serial.print("Server MAC Address:  ");
  Serial.println(WiFi.macAddress());

  // Set the device as a Station and Soft Access Point simultaneously
  WiFi.mode(WIFI_AP_STA);
  // Set device as a Wi-Fi Station
  // WiFi.begin(ssid, password);
  // while (WiFi.status() != WL_CONNECTED) {
  //   delay(1000);
  //   Serial.println("Setting as a Wi-Fi Station..");
  // }
  WiFi.softAP(ssid, password, chan);
  delay(1000);
  Serial.print("Server SOFT AP MAC Address:  ");
  Serial.println(WiFi.softAPmacAddress());
  IPAddress IP = WiFi.softAPIP();
  Serial.print("AP IP address: ");
  Serial.println(IP);
  chan = WiFi.channel();
  // Serial.print("Station IP Address: ");
  // Serial.println(WiFi.localIP());
  Serial.print("Wi-Fi Channel: ");
  Serial.println(WiFi.channel());

  initESP_NOW();
  
  // Start Web server
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/html", index_html);
  });
  

  // Events 
  events.onConnect([](AsyncEventSourceClient *client){
    if(client->lastId()){
      Serial.printf("Client reconnected! Last message ID that it got is: %u\n", client->lastId());
    }
    // send event with message "hello!", id current millis
    // and set reconnect delay to 1 second
    client->send("hello!", NULL, millis(), 10000);
  });
  server.addHandler(&events);
  
  // start server
  server.begin();

}

void loop() {
  static unsigned long lastEventTime = millis();
  static const unsigned long EVENT_INTERVAL_MS = 5000;
  if(msg.available())
  {
    msg.rxObj(uart_msg);
    Serial.print("Recieved from UART: ");
    Serial.println(uart_msg);    //Complete JSON data will be printed here
    DeserializationError error = deserializeJson(JSONbuffer, uart_msg);
      
    if (!error) {
        char type = JSONbuffer["type"];
        if(type == 'C'){
          commandToSend();
        }
        else if(type == 'M'){
          maintenanceDataToSend();
        }
    }

    else {
          Serial.print(F("deserializeJson() failed: "));  //Just in case of an ERROR of ArduinoJSon
          Serial.println(error.f_str());
          return;
    }
  }
  if ((millis() - lastEventTime) > EVENT_INTERVAL_MS) {
    events.send("ping",NULL,millis());
    lastEventTime = millis();
    readDataToSend();
    esp_now_send(NULL, (uint8_t *) &outgoingSetpoints, sizeof(outgoingSetpoints));

  }
}